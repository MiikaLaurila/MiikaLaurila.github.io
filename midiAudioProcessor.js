const BUFFER_SIZE=8192;class MidiAudioProcessor extends AudioWorkletProcessor{activeBuffers=null;pendingBuffers=null;currentBufferIndex=0;hasRequestedBuffers=!1;volume=.5;finalBuffer=!1;constructor(){super(),this.port.onmessage=this.handleMessage.bind(this)}handleMessage(e){const{command:s,data:t}=e.data;"processed-data"===s&&(this.pendingBuffers=[new Float32Array(t.buffers[0]),new Float32Array(t.buffers[1])],this.finalBuffer=t.isFinal,this.hasRequestedBuffers=!1),"set-volume"===s&&(this.volume=t.volume)}process(e,s){const t=s[0];let r=!1;return this.activeBuffers&&this.currentBufferIndex>=8192&&(this.activeBuffers=null,this.currentBufferIndex=0),!this.activeBuffers&&this.pendingBuffers&&(this.activeBuffers=this.pendingBuffers,this.pendingBuffers=null,this.currentBufferIndex=0,this.requestNewBuffers()),this.activeBuffers?this.fillOutput(t):(this.fillSilence(t),r=!0),r&&!this.hasRequestedBuffers&&this.requestNewBuffers(),!0}fillOutput(e){const s=e[0],t=e[1],r=Math.min(s.length,8192-this.currentBufferIndex);for(let e=0;e<r;e++){const r=this.currentBufferIndex+e;s[e]=this.activeBuffers[0][r]*this.volume,t[e]=this.activeBuffers[1][r]*this.volume}if(r<s.length){for(let e=r;e<s.length;e++)s[e]=0,t[e]=0;this.activeBuffers=null,this.currentBufferIndex=0}else this.currentBufferIndex+=r}fillSilence(e){for(const s of e)s.fill(0)}requestNewBuffers(){this.finalBuffer?this.port.postMessage({command:"end-song"}):(this.port.postMessage({command:"process"}),this.hasRequestedBuffers=!0)}}registerProcessor("midi-audio-processor",MidiAudioProcessor);